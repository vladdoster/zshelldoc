#!/usr/bin/env zsh

#
# /bin/sh stage, load configuration to obtain $zsh_control_bin
#

ZERO="$0"
ZSD_DIR="${ZERO%/*}"
[ "$ZSD_DIR" = "${ZSD_DIR#/}" ] && ZSD_DIR="$PWD/$ZSD_DIR"

[ "x$ZSD_CONFIG" = "x" ] && {
  if [ -f ${XDG_CONFIG_HOME:-$HOME/.config}/zshelldoc/zsd.config ]; then
    ZSD_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/zshelldoc/zsd.config"
  elif [ -f "${ZSD_DIR}/zsd.config" ]; then
    ZSD_CONFIG="${ZSD_DIR}/zsd.config"
  elif [ -f /usr/local/share/zshelldoc/zsd.config ]; then
    ZSD_CONFIG="/usr/local/share/zshelldoc/zsd.config"
  elif [ -f /usr/share/zshelldoc/zsd.config ]; then
    ZSD_CONFIG="/usr/share/zshelldoc/zsd.config"
  elif [ -f /opt/share/zshelldoc/zsd.config ]; then
    ZSD_CONFIG="/opt/share/zshelldoc/zsd.config"
  fi

  [ "x$ZSD_CONFIG" != "x" ] && {
    [ "$1" != -q ] && [ "$2" != -q ] && [ "$3" != -q ] && [ "$1" != -r ] && [ "$2" != -r ] && [ "$3" != -r ] && echo "Reading configuration from: $ZSD_CONFIG"
    export ZSD_CONFIG
    [ -f "$ZSD_CONFIG" ] && . "$ZSD_CONFIG"
  }
} || {
  [ -f "$ZSD_CONFIG" ] && . "$ZSD_CONFIG"
}

[ -z $zsh_control_bin ] && zsh_control_bin="zsh"

if [ -z $ZSH_VERSION ]; then
  args="\"$0\""
  for arg; do
    args="$args \"$arg\""
  done
  exec /usr/bin/env "${zsh_control_bin}" -f -c "source ${args}"
fi


local -A colors fg bg fg_bold bg_bold
autoload colors
colors

(( !${+commands[tree]} )) && {
    print -Pr -- "%F{red}Error:%f tree command required to run zshelldoc. Please install it."
    return 1
}

zsd::usage () {
    local -a usage=(
        'Usage: zsd [-hnqv] [--cignore pattern] [--noansi] [--verbose] file [...]'
        ' '
        '   The files will be processed and their documentation will be generated'
        '   in subdirectory zsdoc (with meta-data in subdirectory data).'
        '   Supported are Bash and Zsh scripts' " " 'Options:'
        '  -f, --fpath      Paths separated by pointing to directories with functions'
        '  -h, --help       Usage information'
        '  -n, --noansi     No colors in terminal output'
        '  -q, --quiet      No status messages'
        '  -v, --verbose    More verbose operation-status output'
        '      --bash       Output slightly tailored to Bash specifics (instead of Zsh specifics)'
        '      --blocka     String used as block-begin, default: {{{'
        '      --blockb     String used as block-end, default: }}}'
        '      --cignore    Specify which comment lines should be ignored'
        '      --scomm      Strip comment char # from function comments'
        '      --synopsis   Text to be used in SYNOPSIS section. Line break \"... +\n\", paragraph \"...\n\n\"' " " 'Example --cignore values:'
        '  --cignore (\\#*FUNCTION:*{{{*|\\#*FUN:*{{{*)  Ignore comments like:# FUN: usage {{{'
        '  --cignore \\#*FUNCTION:*{{{*                   Ignore comments like: # FUNCTION: usage {{{'
        ' '
        'Synopsis block:'
        '   # synopsis {{{my synopsis, can be multi-line}}}'
        ' '
        'Environment variables block'
        '   There can be multiple such blocks their content will be merged. The block can'
        '   consist of multiple variables using the VAR_NAME -> var-description format.'
        '   It will be rendered as a table in the output AsciiDoc document.'
        ' '
        '   Example:' "   # env-vars {{{" "   # PATH -> paths to executables" "   # MANPATH -> paths to manuals" "   # }}}" '
        ' "Change the default brace block-delimeters with --blocka, --blockb. Block body should be AsciiDoc")
    print -Prl -- $usage
}

# vim: set expandtab filetype=zsh shiftwidth=4 softtabstop=4 tabstop=4:
